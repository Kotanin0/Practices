package practices;
import java.util.ArrayList;

/**
 * 2以上の数値を入力し、素因数分解した結果を表示しなさい。
 * <p>
 * 引数：整数
 * 返却：素因数を半角スペースで区切った文字列
 * <p>
 * 　例）引数：20100
 * 　　　返却：2 2 3 5 5 67
 */


public class Practice008 {
    public static void main(String[] args) {
        // ここはご自由にお使いください
        System.out.println(factorization(120));
    }

    // 素因数分解
    public static String factorization(int n) {
        if (n <= 1) {
            throw new IllegalArgumentException();
        }
        if (n == 2) {
            return "2";
        }
        String result = "";
        for (int i = 2; i <= n; ) {
            if (n % i > 0) {
                i++;
            } else {
                result +=  " " + i ;
                n = n / i;
            }
        }
        return result.trim();
    }
}


// nを小さい素数から順番に割り続ける。結果が１になったら終了
//イメージする動きはこんな感じ
//たとえば、n=60の場合　
//１．n:60÷素数:2 = 結果:30　余り0　→　同じ処理繰り返し
//２．1の結果:30÷素数:2　=　結果:15 余り0　→　同じ処理繰り返し
//３．2の結果:15÷素数:2　=　結果:7　余り1　→　NG　
//４．2の結果:15÷素数:3　=　結果:5　余り0　→　※割り切れない場合、次の素数に移行するけど、÷元はままイキ
//５．4の結果:5 ÷素数:3　=　結果:1　余り1　→　NG
//６．4の結果:5 ÷素数:5　=　結果:1　余り0　→　
//７．結果が「1」になったので終了
//８．出力「1.の素数」+　"_”　+　「2.の素数」+　"_”　+　「4.の素数」+　"_”　+　「6.の素数」　※最後のブランクは抜こう
//
//たとえば、n=61の場合　→実は素数で割らなくてもいい。
//１．n:61÷素数:2 = 結果:30　余り1　→　NG
//２．n:61÷素数:3 = 結果:20  余り1　→　NG
//３．n:61÷素数:4 = 結果:15  余り1　→　NG　
//４．n:61÷素数:5 = 結果:12  余り1　→　NG
//５．･･･
//６．n:61÷素数:61 = 結果:1  余り0　→　NG
//７．結果が「1」になったので終了
//８．出力「1.の素数」+　"_”　+　「2.の素数」+　"_”　+　「4.の素数」+　"_”　+　「6.の素数」　※最後のブランクは抜こう
//つまり余りが出なかった場合だけ、つなげればいい。

//そもそも素数っていう定義が最初に必要　配列？
//長さが定まらない配列、要素はメソッドの結果を持ってきたい。
//For文のひとかたまりっていうと、１～３までなのかな？
//
//
//
//
//
//
//
//
//
////素数だけを返すメソッド
//public int outPrime(int n) {
//    if (n <= 1) {
//        throw new IllegalArgumentException();
//    } else {
//        for (int i = 2; i < n; i++) {
//            if (n % i > 0) {
//                return n;
//            }
//        }
//    }
//    return -1;
//}
//